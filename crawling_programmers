import requests
import time
import random
from bs4 import BeautifulSoup
from markdownify import MarkdownConverter as MarkdownifyConverter
from selenium import webdriver

class TestSelector:
    def __init__(self, url, parser):
        self.request_html(url)
        self.convert_html_bs4(parser)
        self.parse()

    def request_html(self, url):
        response = requests.get(url)
        self.html = response.text

    def convert_html_bs4(self, parser):
        self.soup = BeautifulSoup(self.html, "lxml")

    def select_level():
        level_inputted = int(input("원하는 문제의 레벨을 입력하세요(0~5):"))
        if 0<=level_inputted<=5:
            level = "&levels=" + level_inputted
        else:
            level = ""
        return level
        
    def select_language():
        language_inputted = input("원하는 문제의 언어를 입력하세요:")
        if language_inputted in ["C", "C++", "C#", "Go", "Java", "JavaScript", "Kotlin", "Python2", "Python3", "Ruby", "Scala", "Swift", "MySQL", "Oracle"]:
            language = "&languages=" + language_inputted
        else:
            language = ""
        return language
    
    def search_test(level, language):
        url = f"https://school.programmers.co.kr/learn/challenges?order=acceptance_desc&page=1{level}{language}"
        driver = webdriver.Chrome() 
        driver.get(url)
        time.sleep(3)
        i = random.randrange(1,21)
        driver.find_element_by_xpath(f'//*[@id="edu-service-app-main"]/div/div[2]/article/div[2]/div[1]/div[5]/div/table/tbody/tr[{i}]').click()
        problem_page_url = driver.current_url
        print(problem_page_url)
        return problem_page_url

class TestCrawler:
    def __init__(self, problem_page_url, parser):
        self.request_html(problem_page_url)
        self.convert_html_bs4(parser)
        self.parse()

    def request_html(self, problem_page_url):
        response = requests.get(problem_page_url)
        self.html = response.text

    def convert_html_bs4(self, parser):
        self.soup = BeautifulSoup(self.html, "lxml")

    def parse(self):
        category, title, description= self.find_category_title()

    def find_category_title(self):
        category_title_soup = self.soup.find("ol", "breadcrumb")
        _, category_soup, title_soup = category_title_soup.find_all("li")
        category = category_soup.get_text()
        title = title_soup.get_text()
        description = md(self.soup.find("div", "guide-section-description"))
        print(category, title, description)
        return category, title, description

def md(soup, **options):
    return MarkdownifyConverter(**options).convert_soup(soup)

if __name__ == "__main__":
    parser = "lxml"
    url = TestSelector()
    problem_page_url = TestSelector()
    selector = TestSelector(url, parser)
    crawler = TestCrawler(problem_page_url, parser)
